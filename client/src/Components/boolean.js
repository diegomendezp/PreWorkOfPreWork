import React from 'react'

export const Booleans = () => {
  return(
    <div>
        <div id="doc" className="markdown-body container-fluid" style={{position: 'relative'}}><h1 id="Booleans-and-Conditional-Statements"><a className="anchor hidden-xs" href="#Booleans-and-Conditional-Statements" title="Booleans-and-Conditional-Statements"><span className="octicon octicon-link" /></a>Booleans and Conditional Statements</h1><h2 id="Learning-Goals"><a className="anchor hidden-xs" href="#Learning-Goals" title="Learning-Goals"><span className="octicon octicon-link" /></a>Learning Goals</h2><p>After this lesson, you will be able to:</p><ul>
            <li>Instantiate boolean variables.</li>
            <li>Understand flow control and how booleans can apply it.</li>
            <li>Understand and use the <code>if</code> and <code>switch</code> statements.</li>
            <li>Understand logical operators OR, AND, and NOT.</li>
          </ul><h2 id="Boolean-Variables"><a className="anchor hidden-xs" href="#Boolean-Variables" title="Boolean-Variables"><span className="octicon octicon-link" /></a>Boolean Variables</h2><p>Do you remember variables? For example:</p><pre><code className="javascript hljs"><span className="token keyword">var</span> name <span className="token operator">=</span> <span className="token string">"Ironhack"</span> <span className="token comment">// String type</span>{"\n"}<span className="token keyword">var</span> age <span className="token operator">=</span> <span className="token number">25</span> <span className="token comment">// Integer type</span>{"\n"}</code></pre><p>Booleans are a type of variable that can have two different values: <strong>true</strong> or <strong>false</strong>.</p><pre><code className="javascript hljs"><span className="token keyword">var</span> power <span className="token operator">=</span> <span className="token boolean">true</span> <span className="token comment">// Boolean type</span>{"\n"}<span className="token keyword">var</span> isRaining <span className="token operator">=</span> <span className="token boolean">false</span> <span className="token comment">// Boolean type</span>{"\n"}</code></pre><h3 id="Boolean-expressions"><a className="anchor hidden-xs" href="#Boolean-expressions" title="Boolean-expressions"><span className="octicon octicon-link" /></a>Boolean expressions</h3><table>
            <thead>
              <tr>
                <th>Expression</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>true</code></td>
                <td>Literal expression with value <code>true</code>.</td>
              </tr>
              <tr>
                <td><code>false</code></td>
                <td>Literal expression with value <code>false</code>.</td>
              </tr>
              <tr>
                <td><code>==</code></td>
                <td>Compares two values. Return true if the values have the same value.</td>
              </tr>
              <tr>
                <td><code>===</code></td>
                <td>Compares two values. Return true if the values have the same value and type of value.</td>
              </tr>
              <tr>
                <td><code>&lt;</code></td>
                <td>Compares two values. Return true if the first value is smaller than the second value.</td>
              </tr>
              <tr>
                <td><code>&gt;</code></td>
                <td>Compares two values. Return true if the first value is bigger than the second value.</td>
              </tr>
              <tr>
                <td><code>&lt;=</code></td>
                <td>Compares two values. Return true if the first value is smaller or equal than the second value.</td>
              </tr>
              <tr>
                <td><code>&gt;=</code></td>
                <td>Compares two values. Return true if the first value is bigger or equal than the second value.</td>
              </tr>
            </tbody>
          </table><div className="alert alert-info">
            <p>The difference between <code>==</code> and <code>===</code> is that <code>===</code> checks if the type of the value is the same. Thus, is <strong>always recommended (and a best practice) to use <code>===</code></strong>.</p>
          </div><pre><code className="javascript hljs"><span className="token number">2</span> <span className="token operator">==</span> <span className="token string">"2"</span>{"  "}<span className="token comment">//=&gt; true</span>{"\n"}<span className="token number">2</span> <span className="token operator">===</span> <span className="token string">"2"</span> <span className="token comment">//=&gt; false</span>{"\n"}<span className="token number">2</span> <span className="token operator">===</span> <span className="token number">2</span>{"   "}<span className="token comment">//=&gt; true</span>{"\n"}</code></pre><h2 id="The-if-statement"><a className="anchor hidden-xs" href="#The-if-statement" title="The-if-statement"><span className="octicon octicon-link" /></a>The <code>if</code> statement</h2><p>The <code>if</code> statement (or conditional block) executes a block of instructions if a specified <em>condition</em> is true. The <em>condition</em> is an expression that evaluates to true or false.</p><pre><code className="javascript hljs"><span className="token operator">...</span>{"\n"}<span className="token keyword">if</span> <span className="token punctuation">(</span>age <span className="token operator">&lt;</span> <span className="token number">18</span><span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span> <span className="token operator">...</span> <span className="token punctuation">{"}"}</span>{"\n"}<span className="token keyword">if</span> <span className="token punctuation">(</span>companyName <span className="token operator">===</span> <span className="token string">"Ironhack"</span><span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span> <span className="token operator">...</span> <span className="token punctuation">{"}"}</span>{"\n"}<span className="token operator">...</span>{"\n"}</code></pre><p>We can use variables to store this expressions:</p><pre><code className="javascript hljs"><span className="token keyword">var</span> isIronhackStudent <span className="token operator">=</span> <span className="token boolean">true</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">if</span> <span className="token punctuation">(</span>isIronhackStudent<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span> <span className="token operator">...</span> <span className="token punctuation">{"}"}</span>{"\n"}</code></pre><h3 id="The-if-statement1"><a className="anchor hidden-xs" href="#The-if-statement1" title="The-if-statement1"><span className="octicon octicon-link" /></a>The <code>if</code> statement</h3><div className="alert alert-info">
            <p><strong>Syntax</strong><br />
              <br /></p>
            <pre><code className="javascript hljs"><span className="token keyword">if</span> <span className="token punctuation">(</span>condition<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}<span className="token comment">// statements</span>{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre>
          </div><p>In the code above, the <code>statements</code> is a block of instructions that will be executed if the condition evaluates to <strong>true</strong>.</p><h4 id="Example"><a className="anchor hidden-xs" href="#Example" title="Example"><span className="octicon octicon-link" /></a>Example:</h4><p>These blocks of instructions could also be further nested <code>if</code> statements. Like this:</p><pre><code className="javascript hljs"><span className="token keyword">var</span> isIronhackStudent <span className="token operator">=</span> <span className="token boolean">true</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">var</span> hardWork <span className="token operator">=</span> <span className="token number">9</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">if</span> <span className="token punctuation">(</span>isIronhackStudent<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"Welcome to Ironhack :)"</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"\n"}{"  "}<span className="token keyword">if</span> <span className="token punctuation">(</span>hardWork <span className="token operator">&gt;</span> <span className="token number">8</span><span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"    "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"You will be a great developer!"</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"  "}<span className="token punctuation">{"}"}</span>{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre><h3 id="The-else-statement"><a className="anchor hidden-xs" href="#The-else-statement" title="The-else-statement"><span className="octicon octicon-link" /></a>The <code>else</code> statement</h3><div className="alert alert-info">
            <p><strong>Syntax</strong><br />
              <br /></p>
            <pre><code className="javascript hljs"><span className="token keyword">if</span> <span className="token punctuation">(</span>condition<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}<span className="token comment">// statements</span>{"\n"}<span className="token punctuation">{"}"}</span> <span className="token keyword">else</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}<span className="token comment">// statements</span>{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre>
          </div><p>The <code>else</code> statement is executed when the <code>if</code> statement condition is false.</p><h4 id="Example1"><a className="anchor hidden-xs" href="#Example1" title="Example1"><span className="octicon octicon-link" /></a>Example</h4><pre><code className="javascript hljs"><span className="token keyword">var</span> age <span className="token operator">=</span> <span className="token number">25</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">var</span> isUnderEighteen <span className="token operator">=</span> age <span className="token operator">&lt;</span> <span className="token number">18</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">if</span> <span className="token punctuation">(</span>isUnderEghteen<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"You can enter the disco"</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}<span className="token punctuation">{"}"}</span> <span className="token keyword">else</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"You can't enter the disco"</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre><p>And also with nested conditional statements:</p><pre><code className="javascript hljs"><span className="token keyword">var</span> isIronhackStudent <span className="token operator">=</span> <span className="token boolean">true</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">var</span> hardWork <span className="token operator">=</span> <span className="token number">9</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">if</span> <span className="token punctuation">(</span>isIronhackStudent<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"Welcome to Ironhack :)"</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"\n"}{"  "}<span className="token keyword">if</span> <span className="token punctuation">(</span>hardWork <span className="token operator">&gt;</span> <span className="token number">8</span><span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"    "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"You will be a great developer!"</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"  "}<span className="token punctuation">{"}"}</span> <span className="token keyword">else</span> <span className="token punctuation">{"{"}</span>{"\n"}{"    "}console<span className="token punctuation">.</span><span className="token function">log</span><span className="token punctuation">(</span><span className="token string">"You need to work harder... "</span><span className="token punctuation">)</span>{"\n"}{"  "}<span className="token punctuation">{"}"}</span>{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre><h3 id="The-else-if-statements"><a className="anchor hidden-xs" href="#The-else-if-statements" title="The-else-if-statements"><span className="octicon octicon-link" /></a>The <code>else if</code> statements</h3><div className="alert alert-info">
            <p><strong>Syntax</strong><br />
              <br /></p>
            <pre><code className="javascript hljs"><span className="token keyword">if</span> <span className="token punctuation">(</span>condition1<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}statements{"\n"}<span className="token punctuation">{"}"}</span> <span className="token keyword">else</span> <span className="token keyword">if</span> <span className="token punctuation">(</span>condition2<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}statements{"\n"}<span className="token punctuation">{"}"}</span> <span className="token keyword">else</span> <span className="token keyword">if</span> <span className="token punctuation">(</span>condition3<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre>
          </div><p>The <code>else if</code> statement is executed when the previous <code>if</code> or <code>else if</code> statement condition is false. Then, following the example, if <code>condition1</code> is true, it will execute the statements inside and the other two will not be executed.</p><h3 id="Example2"><a className="anchor hidden-xs" href="#Example2" title="Example2"><span className="octicon octicon-link" /></a>Example</h3><iframe height={400} src="https://repl.it/@ta_web_mad/Boolean1Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><p>In this example, our hardWork is 7:</p><ul>
            <li>It will evaluate the first condition.</li>
            <li>It will skip the first block since the expression is false.</li>
            <li>It will evaluate the second condition.</li>
            <li>Then, It will execute the second statement block.</li>
            <li>Finally, it will finish the conditional block, skipping all the next possible conditions.</li>
          </ul><h3 id="Example-2"><a className="anchor hidden-xs" href="#Example-2" title="Example-2"><span className="octicon octicon-link" /></a>Example 2</h3><p>What if we have a single block where more than one condition is true?</p><iframe height={400} src="https://repl.it/@ta_web_mad/Boolean2Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><p>In this example, our hardWork is 9:</p><ul>
            <li>It will evaluate the first condition.</li>
            <li>Then, it will execute the first statement block.</li>
            <li>Finally, it will finish the conditional block, skipping all the next possible conditions.</li>
          </ul><div className="alert alert-success">
            <p>Once a condition of an <code>if</code> statement is true, it will execute the statements inside and skip all the other conditions in the same block.</p>
          </div><h3 id="Example-3"><a className="anchor hidden-xs" href="#Example-3" title="Example-3"><span className="octicon octicon-link" /></a>Example 3</h3><p>What if we have several block statements that are true?</p><iframe height={400} src="https://repl.it/@ta_web_mad/Boolean3Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><div className="alert alert-success">
            <p>Here, both conditions will be evaluated since they belong to different conditional blocks.</p>
          </div><h2 id="Logical-operators-AND-OR-and-NOT"><a className="anchor hidden-xs" href="#Logical-operators-AND-OR-and-NOT" title="Logical-operators-AND-OR-and-NOT"><span className="octicon octicon-link" /></a>Logical operators: AND, OR, and NOT</h2><p>The logical operators are used to combine simple relational statements into more complex expressions. They are typically used with <code>boolean</code> values.</p><p>The logical operators are described in the following table:</p><table>
            <thead>
              <tr>
                <th>Operator</th>
                <th>Usage</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>AND (<code>&amp;&amp;</code>)</td>
                <td><code>expr1 &amp;&amp; expr2</code></td>
                <td>The logical AND (<code>&amp;&amp;</code>) returns true if both operands are true; otherwise, returns false.</td>
              </tr>
              <tr>
                <td>OR (<code>||</code>)</td>
                <td><code>expr1 || expr2</code></td>
                <td>The logical OR (<code>||</code>) <strong>returns true</strong> if at least one of the operands is true; if both are false, returns false.</td>
              </tr>
              <tr>
                <td>NOT (<code>!</code>)</td>
                <td><code>!expr</code></td>
                <td>Returns the oposite boolean state. If the operand is true, returns false. If the operand is false, returns true.</td>
              </tr>
            </tbody>
          </table><iframe height={500} src="https://repl.it/@ta_web_mad/Boolean4Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><iframe height={500} src="https://repl.it/@ta_web_mad/Boolean5Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><p>The switch statement evaluates an expression, matching the expression’s value to a case clause, and executes statements (instruction blocks) associated with that case.</p><h3 id="Switch-syntax"><a className="anchor hidden-xs" href="#Switch-syntax" title="Switch-syntax"><span className="octicon octicon-link" /></a>Switch syntax</h3><div className="alert alert-info">
            <p><strong>Syntax</strong><br />
              <br /></p>
            <pre><code className="javascript hljs"><span className="token keyword">switch</span> <span className="token punctuation">(</span>expression<span className="token punctuation">)</span> <span className="token punctuation">{"{"}</span>{"\n"}{"  "}<span className="token keyword">case</span> value1<span className="token punctuation">:</span>{"\n"}{"    "}<span className="token comment">//Statements executed when the result of expression matches value1</span>{"\n"}{"    "}<span className="token punctuation">[</span><span className="token keyword">break</span><span className="token punctuation">;</span><span className="token punctuation">]</span>{"\n"}{"  "}<span className="token keyword">case</span> value2<span className="token punctuation">:</span>{"\n"}{"    "}<span className="token comment">//Statements executed when the result of expression matches value2</span>{"\n"}{"    "}<span className="token punctuation">[</span><span className="token keyword">break</span><span className="token punctuation">;</span><span className="token punctuation">]</span>{"\n"}{"  "}<span className="token operator">...</span>{"\n"}{"  "}<span className="token keyword">case</span> valueN<span className="token punctuation">:</span>{"\n"}{"    "}<span className="token comment">//Statements executed when the result of expression matches valueN</span>{"\n"}{"    "}<span className="token punctuation">[</span><span className="token keyword">break</span><span className="token punctuation">;</span><span className="token punctuation">]</span>{"\n"}{"  "}<span className="token keyword">default</span><span className="token punctuation">:</span>{"\n"}{"    "}<span className="token comment">//Statements executed when none of the values match the value of the expression</span>{"\n"}{"    "}<span className="token punctuation">[</span><span className="token keyword">break</span><span className="token punctuation">;</span><span className="token punctuation">]</span>{"\n"}<span className="token punctuation">{"}"}</span>{"\n"}</code></pre>
          </div><h3 id="Example3"><a className="anchor hidden-xs" href="#Example3" title="Example3"><span className="octicon octicon-link" /></a>Example</h3><iframe height={500} src="https://repl.it/@ta_web_mad/Boolean6Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><div className="alert alert-success">
            <p>The value of the variable <code>pet</code> is actually “dog”, so it will find if “dog” is one of the cases in the switch block.</p>
          </div><div className="alert alert-info">
            <p>Try to change the <code>pet</code> variable value and reproduce the different cases. What happens if you have a different value than the cases reflected in the switch block?</p>
          </div><h4 id="Break"><a className="anchor hidden-xs" href="#Break" title="Break"><span className="octicon octicon-link" /></a>Break</h4><p>The <code>break</code> statement finishes a block execution, such us conditional blocks or loop blocks, and continues with the execution of the program.</p><p>You will use <code>break</code> very rarely, because you should be able to control the flow of your program instead of break in it. You are good developers!</p><p>Switch blocks is one of the rare cases, because you want to evaluate all the conditions until the one of them matches. If a condition matches, it will execute the rest statements inside, and finally it will finish the block execution. You do this in order to prevent more than one match.</p><h2 id="Truthy-and-Falsy"><a className="anchor hidden-xs" href="#Truthy-and-Falsy" title="Truthy-and-Falsy"><span className="octicon octicon-link" /></a>Truthy and Falsy</h2><p>JavaScript, and many other languages, support <code>boolean</code> data types that could be true or false.</p><p>In addition to that, everything in JavaScript has an implicit <code>boolean</code> value that can be <strong>truthy</strong> or <strong>falsy</strong>.</p><p>When you say that a value is <em>truthy</em> in JavaScript, it doesn’t mean that the value is true. Rather, what it means that the value coerces to true when evaluated in a boolean context.</p><p>Correspondingly, when you say a value is <em>falsy</em> in JavaScript, it means the value translates to false when evaluated in a Boolean context.</p><p>All values are truthy unless they are defined as falsy. The falsy values in JavaScript are:</p><pre><code className="javascript hljs"><span className="token boolean">false</span>{"\n"}<span className="token keyword">null</span>{"\n"}undefined{"\n"}<span className="token number">0</span>{"\n"}<span className="token number">NaN</span>{"\n"}<span className="token string">''</span>{"\n"}<span className="token string">""</span>{"\n"}</code></pre><h3 id="Example4"><a className="anchor hidden-xs" href="#Example4" title="Example4"><span className="octicon octicon-link" /></a>Example</h3><iframe height={500} src="https://repl.it/@ta_web_mad/Boolean7Example?lite=true" allowFullScreen="true" style={{width: '100%'}}>
          </iframe><h2 id="Summary"><a className="anchor hidden-xs" href="#Summary" title="Summary"><span className="octicon octicon-link" /></a>Summary</h2><p>In this lesson you have learnt how to apply decision making in Javascript using  <code>if</code> and <code>switch</code> statements. You also know that besides the very common true and false booleans, everything in JavaScript can be truthy or falsy, but their value will be true or false only when evaluating them in a boolean context.</p><p>You have also seen how to use <strong>AND</strong>, <strong>OR</strong>, and <strong>NOT</strong> logical operators to create more complex conditions and more specific code. These will be very useful tools to break down problems and create more efficient programming solutions.</p><h2 id="Extra-Resources"><a className="anchor hidden-xs" href="#Extra-Resources" title="Extra-Resources"><span className="octicon octicon-link" /></a>Extra Resources</h2><ul>
            <li><a href="https://www.sitepoint.com/javascript-truthy-falsy/" target="_blank">Truthy and Falsy: When All is Not Equal in JavaScript</a> - More examples of falsy values and comparisons.</li>
            <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators" target="_blank">MDN - Logical Operators</a>.</li>
            <li><a href="http://javascript.info/tutorial/comparison-operators-ifelse" target="_blank">javascript.info Tutorial</a> - A short tutorial to understand operators even more.</li>
          </ul></div>
        <div className="ui-toc dropup unselectable hidden-print" style={{display: 'none'}}>
          <div className="pull-right dropdown">
            <a id="tocLabel" className="ui-toc-label btn btn-default" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false" title="Table of content">
              <i className="fa fa-bars" />
            </a>
            <ul id="ui-toc" className="ui-toc-dropdown dropdown-menu" aria-labelledby="tocLabel">
              <div className="toc"><ul className="nav"><li className><a href="#Booleans-and-Conditional-Statements" title="Booleans and Conditional Statements">Booleans and Conditional Statements</a><ul className="nav"><li><a href="#Learning-Goals" title="Learning Goals">Learning Goals</a></li><li className><a href="#Boolean-Variables" title="Boolean Variables">Boolean Variables</a><ul className="nav"><li><a href="#Boolean-expressions" title="Boolean expressions">Boolean expressions</a></li></ul></li><li><a href="#The-if-statement" title="The if statement">The if statement</a><ul className="nav"><li><a href="#The-if-statement1" title="The if statement">The if statement</a></li><li><a href="#The-else-statement" title="The else statement">The else statement</a></li><li><a href="#The-else-if-statements" title="The else if statements">The else if statements</a></li><li><a href="#Example2" title="Example">Example</a></li><li><a href="#Example-2" title="Example 2">Example 2</a></li><li><a href="#Example-3" title="Example 3">Example 3</a></li></ul></li><li><a href="#Logical-operators-AND-OR-and-NOT" title="Logical operators: AND, OR, and NOT">Logical operators: AND, OR, and NOT</a><ul className="nav"><li><a href="#Switch-syntax" title="Switch syntax">Switch syntax</a></li><li><a href="#Example3" title="Example">Example</a></li></ul></li><li className><a href="#Truthy-and-Falsy" title="Truthy and Falsy">Truthy and Falsy</a><ul className="nav"><li><a href="#Example4" title="Example">Example</a></li></ul></li><li><a href="#Summary" title="Summary">Summary</a></li><li className><a href="#Extra-Resources" title="Extra Resources">Extra Resources</a></li></ul></li></ul></div><div className="toc-menu"><a className="expand-toggle" href="#">Expand all</a><a className="back-to-top" href="#">Back to top</a><a className="go-to-bottom" href="#">Go to bottom</a></div>
            </ul>
          </div>
        </div>
        <div id="ui-toc-affix" className="ui-affix-toc ui-toc-dropdown unselectable hidden-print" data-spy="affix" style={{top: 17, display: 'none'}}>
          <div className="toc"><ul className="nav"><li className><a href="#Booleans-and-Conditional-Statements" title="Booleans and Conditional Statements">Booleans and Conditional Statements</a><ul className="nav"><li><a href="#Learning-Goals" title="Learning Goals">Learning Goals</a></li><li className><a href="#Boolean-Variables" title="Boolean Variables">Boolean Variables</a><ul className="nav"><li><a href="#Boolean-expressions" title="Boolean expressions">Boolean expressions</a></li></ul></li><li><a href="#The-if-statement" title="The if statement">The if statement</a><ul className="nav"><li><a href="#The-if-statement1" title="The if statement">The if statement</a></li><li><a href="#The-else-statement" title="The else statement">The else statement</a></li><li><a href="#The-else-if-statements" title="The else if statements">The else if statements</a></li><li><a href="#Example2" title="Example">Example</a></li><li><a href="#Example-2" title="Example 2">Example 2</a></li><li><a href="#Example-3" title="Example 3">Example 3</a></li></ul></li><li><a href="#Logical-operators-AND-OR-and-NOT" title="Logical operators: AND, OR, and NOT">Logical operators: AND, OR, and NOT</a><ul className="nav"><li><a href="#Switch-syntax" title="Switch syntax">Switch syntax</a></li><li><a href="#Example3" title="Example">Example</a></li></ul></li><li className><a href="#Truthy-and-Falsy" title="Truthy and Falsy">Truthy and Falsy</a><ul className="nav"><li><a href="#Example4" title="Example">Example</a></li></ul></li><li><a href="#Summary" title="Summary">Summary</a></li><li className><a href="#Extra-Resources" title="Extra Resources">Extra Resources</a></li></ul></li></ul></div><div className="toc-menu"><a className="expand-toggle" href="#">Expand all</a><a className="back-to-top" href="#">Back to top</a><a className="go-to-bottom" href="#">Go to bottom</a></div>
        </div>
      </div>
  )
}